name: windows-ci
on:
  pull_request:
  release:
    types: [published]
  push:
    tags:
    branches:
      - main
      - develop

env:
  VERBOSE: 1
  UPLOAD_BIN_DIR: true

jobs:
  BuildAndTest:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-2022
        compiler:
          # you can specify the version after `-` like "llvm-15.0.2".
          #  - gcc-13
          - msvc-2022
        env:
          - PRESET: windows-msvc-debug-developer-mode
            ENABLE_IPO: OFF
          - PRESET: windows-msvc-release-developer-mode
            ENABLE_IPO: OFF
        # exclude:
        #   # mingw is determined by this author to be too buggy to support
        #   - os: windows-2022
        #     compiler: gcc-13
        #   - os: windows-2022
        #     cmake_preset:
        #       - unixlike-gcc-debug
        #       - unixlike-gcc-release
        #       - unixlike-clang-debug
        #       - unixlike-clang-release
        #

    #        include:
    # Add appropriate variables for gcov version required. This will intentionally break
    # if you try to use a compiler that does not have gcov set
    #          - os: windows-2022
    #            compiler: msvc
    #            env:
    #              PRESET: windows-msvc-debug-developer-mode
    #              ENABLE_IPO: OFF

    # - os: windows-2022
    #   compiler: llvm-18
    #   env:
    #     PRESET: windows-clang-debug
    # - compiler: gcc-13
    #   gcov_executable: gcov
    #   enable_ipo: On
    #
    # # Set up preferred package generators, for given build configurations
    # - build_type: Release
    #   packaging_maintainer_mode: OFF
    #   package_generator: TBZ2

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Cache
        uses: ./.github/actions/setup_cache
        with:
          compiler: ${{ matrix.compiler }}
          build_type: ${{ matrix.build_type }}
          packaging_maintainer_mode: ${{ matrix.packaging_maintainer_mode }}

      - name: Project Name
        uses: cardinalby/export-env-action@v2
        with:
          envFile: ".github/constants.env"

      - name: Config powershell
        run: |
          $multiLineText = @'
          function Invoke-Environment {
              param
              (
                  # Any cmd shell command, normally a configuration batch file.
                  [Parameter(Mandatory=$true)]
                  [string] $Command
              )
              $Command = "`"" + $Command + "`""
              cmd /c "$Command > nul 2>&1 && set" | . { process { 
                  if ($_ -match '^([^=]+)=(.*)') {
                      [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
                  }
              }}
          }
          '@
          $directory = [System.IO.Path]::GetDirectoryName($PROFILE)
          if (-not (Test-Path -Path $directory)) {
              New-Item -ItemType Directory -Path $PROFILE -Force
          }
          echo $multiLineText >> $PROFILE
          cat $PROFILE

      - name: Install tools
        working-directory: ./scripts/setup
        run: |
          choco install -y just
          just setup

      - name: Build,test and pack
        run: |
          Import-Module "$env:ChocolateyInstall/helpers/chocolateyInstaller.psm1"
          refreshenv
          Invoke-Environment("${{env.MSVC_INSTALL_DIR}}\\buildTools\\VC\\Auxiliary\\Build\\vcvars64.bat")
          conan profile detect
          echo "[options]" >> $env:USERPROFILE\.conan2\profiles\default
          echo "
          tools.build:skip_test = True" >> $env:USERPROFILE\.conan2\global.conf
          echo "====================global.conf======================"
          cat $env:USERPROFILE\.conan2\global.conf
          echo "===================profile default==================="
          cat $env:USERPROFILE\.conan2\profiles\default
          echo "====================================================="
          echo "Starting building project...."
          echo "====================================================="
          echo "**************  Runing cmake configure  ****************"
          just conf
          echo "**************    Runing cmake build    ****************"
          just build 
          echo "**************    Test and coverage     ****************"
          just test
          # TODO: add coverage to justfile
          cd ./out/build/conf-${{matrix.env.PRESET}}
          OpenCppCoverage.exe --export_type cobertura:coverage.xml --cover_children -- ctest
          echo "**************      Run cmake pack      ****************"
          just pack
        env:
          PRESET: ${{matrix.env.PRESET}}
          ENABLE_IPO: ${{matrix.env.ENABLE_IPO}}

      - name: Publish Tagged Release
        uses: softprops/action-gh-release@v1
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        with:
          files: |
            ./out/build/${{matrix.env.PRESET}}/*-*${{ matrix.build_type }}*-*.*

      - name: Publish to codecov
        uses: codecov/codecov-action@v4
        with:
          flags: ${{ runner.os }}
          name: ${{ runner.os }}-coverage
          files: ./out/build/${{matrix.env.PRESET}}/coverage.xml
          verbose: true # optional (default = false)

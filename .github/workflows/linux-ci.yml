name: linux-ci
on:
  pull_request:
  release:
    types: [published]
  push:
    tags:
    branches:
      - main
      - develop

env:
  VERBOSE: 1
  UPLOAD_BIN_DIR: true

jobs:
  Test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false

      # Recommendations:
      #   * support at least 2 operating systems
      #   * support at least 2 compilers
      #   * make sure all supported configurations for your project are built
      #
      # Disable/enable builds in this list to meet the above recommendations
      # and your own projects needs
      matrix:
        os:
          - ubuntu-22.04
        #   - windows-2022
        compiler:
          # you can specify the version after `-` like "llvm-15.0.2".
          - gcc-13
        #   - msvc-2022
        #   - llvm-18
        env:
          - PRESET: unixlike-gcc-debug
            ENABLE_IPO: ON
          - PRESET: unixlike-gcc-release
            ENABLE_IPO: ON
        # exclude:
        # include:
        # Add appropriate variables for gcov version required. This will intentionally break
        # if you try to use a compiler that does not have gcov set
    #          - os: ubuntu-22.04
    #            compiler: gcc-11
    #            gcov_executable: gcov
    #            env:
    #              PRESET: unixlike-gcc-debug
    #              ENABLE_IPO: ON
    #          - os: ubuntu-22.04
    #            compiler: gcc-11
    #            gcov_executable: gcov
    #            env:
    #              PRESET: unixlike-gcc-release
    #              ENABLE_IPO: ON

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Cache
        uses: ./.github/actions/setup_cache
        with:
          compiler: ${{ matrix.compiler }}
          build_type: ${{ matrix.build_type }}
          packaging_maintainer_mode: ${{ matrix.packaging_maintainer_mode }}

      - name: Project Name
        uses: cardinalby/export-env-action@v2
        with:
          envFile: ".github/constants.env"

      - name: Install tools
        run: |
          sudo apt install -y ninja ccache cppcheck gcovr
          pipx install rust-just
          pipx install conan

      - name: Conifigure tools
        run: |
          conan profile detect 
          echo "[options]
          *:shared=True" >> $HOME/.conan2/profiles/default
          echo "
          tools.system.package_manager:mode = install
          tools.system.package_manager:sudo = True
          tools.build:skip_test = True" >> $HOME/.conan2/global.conf
          echo "====================global.conf======================"
          cat $HOME/.conan2/global.conf
          echo "===================profile default==================="
          cat $HOME/.conan2/profiles/default

      - name: Configure CMake
        run: |
          just conf
        env:
          PRESET: ${{matrix.env.PRESET}}
          ENABLE_IPO: ${{matrix.env.ENABLE_IPO}}

      - name: Build
        id: build
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: |
          just build

      - name: Test and coverage
        run: |
          just test

      - name: CPack
        run: |
          just pack

      - name: Publish Tagged Release
        uses: softprops/action-gh-release@v1
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        with:
          files: |
            ./out/build/${{matrix.env.PRESET}}/*-*${{ matrix.build_type }}*-*.*

      - name: Publish to codecov
        uses: codecov/codecov-action@v4
        with:
          flags: ${{ runner.os }}
          name: ${{ runner.os }}-coverage
          files: ./out/build/${{matrix.env.PRESET}}/coverage.xml
          verbose: true # optional (default = false)
